{%- macro rate_limits(dry_run) %}
	rateLimit(dryRun: {% if dry_run %}true{% else %}false{% endif %}) {
		limit
		cost
		remaining
		resetAt
		nodeCount
	}
{% endmacro -%}

{% macro commit_fields() %}
						abbreviatedOid
						authoredDate
						author {
							user {
								login
							}
						}
						committedDate
						committer {
							user {
								login
							}
						}
						changedFiles
						additions
						deletions
						message
{% endmacro %}

{% macro stringify(value) %}
{%- if value %}{{ value | tojson }}{% else %}null{% endif -%}
{% endmacro %}


{# The name of a fragment must be unique, so base it on repo name after some cleanup. #}
{%- macro repo_fragment(owner, clean_name, name, since, after, commits=100) %}
	{{ clean_name }}: repository(owner: "{{ owner }}", name: "{{ name}}")	{
		name
		description
		defaultBranchRef {
			name
			target {
				... on Commit {
					history(first: {{ commits }}, since: {{ stringify(since) }}, after: {{ stringify(after) }}) {
						nodes {
							{{ commit_fields() }}
						}
						pageInfo {
							endCursor
							hasNextPage
						}
					}
				}
			}
		}
	}
{% endmacro -%}

{# Args: owner, repos, since, dry_run. #}
query ReposAndCommitsPaged {
	{{ rate_limits(dry_run) }}
	{% for repo in repos %}
		{{ repo_fragment(owner, repo.clean_name, repo.name, since, repo.cursor) }}
	{% endfor %}
}
